export const BASE_URL: any;
interface Redirects {
    logout_url: string;
    new_account_url: string;
    success_url?: string;
    suspended_url?: string;
    upgrade_url?: string;
}
interface CallbacksLogoutParams {
    challenge?: string;
}
interface DetachConfig {
    client_id: string;
    secret?: string;
    device: string;
    account?: string;
    /** @deprecated Use account instead */
    user?: string;
    domain?: string;
}
interface Group {
    id: string;
    name?: string;
    metadata?: {
        [key: string]: string;
    };
}
export interface LimitConfig {
    /**
     * @deprecated Use overall_device_limit instead.
     * @description The overall maximum devices that can be attached to a single account
     */
    overall_limit?: number;
    /**
     * @description The maximum devices that can be attached to a single account.
     */
    overall_device_limit?: number;
    /**
     * @description The number of people allowed to use the same account. This is useful for family plans. If Rupt detects more than this number of people using the same account (even if not using at the same time), it will trigger the on_limit_exceeded callback.
     */
    people_limit?: number;
}
export interface AttachResponse {
    success: boolean;
    attached_devices: number;
    device_id: string;
    default_device_limit: number;
    block_over_usage: boolean;
    suspended?: boolean;
    access: string;
    identity: string;
}
export interface EvaluationResponse {
    fingerprint_id: string;
    confidence: number;
    verdict: "allow" | "deny" | "challenge";
    reasons: string[];
}
export interface FingerprintResponse {
    fingerprint_id: string;
    confidence: number;
}
export interface AttachConfig {
    client_id: string;
    secret?: string;
    account: string;
    /** @deprecated Use account instead */
    user?: string;
    email?: string;
    phone?: string;
    metadata?: object;
    groups?: Group[] | Group;
    debug?: boolean;
    identity?: string;
    include_page?: boolean;
    limit_config?: LimitConfig;
    redirect_urls?: Redirects;
    on_challenge?: (_: CallbacksLogoutParams) => boolean;
    on_limit_exceeded?: () => void;
    on_current_device_logout?: (_: CallbacksLogoutParams) => boolean;
    domain?: string;
    tolerance?: "default" | "strict" | "lenient";
    event?: "sign_up" | "trial_started" | "upgrade" | string;
}
export function attach({ client_id, secret, account, user, email, phone, metadata, debug, include_page, domain, limit_config, redirect_urls, tolerance, event, groups, on_challenge, on_limit_exceeded, on_current_device_logout, }: AttachConfig): Promise<AttachResponse | null>;
export function getSignals(): Promise<{
    fonts: {
        value: string[];
    };
    languages: {
        value: string[][];
    };
    screenResolution: {
        value: [number, number];
    };
    timezone: {
        value: string;
    };
    platform: {
        value: string;
    };
    touchSupport: {
        value: import("touch_support").TouchSupport;
    };
    math: {
        value: Record<string, number>;
    };
    localStorage: {
        value: string | boolean;
    };
    highEntropyValues: {
        value: object;
    };
}>;
export function getAttachedDevices({ user, client_id, secret }: {
    user: any;
    client_id: any;
    secret: any;
}): Promise<any>;
export function detach({ device, account, user, client_id, secret, domain, }: DetachConfig): Promise<any>;
interface IdentifyConfig {
    client_id: string;
    domain?: string;
    tolerance?: "default" | "strict" | "lenient";
}
interface IdentificationRequestResponse {
    identification: string;
}
export function identify({ client_id, domain, tolerance, }: IdentifyConfig): Promise<IdentificationRequestResponse>;
/**
 * Get the fingerprint of the device.
 * @param {string} client_id - The client ID.
 * @returns {Promise<FingerprintResponse>} The fingerprint response.
 */
export function getFingerprint({ client_id, }: {
    client_id: string;
}): Promise<FingerprintResponse>;
/**
 * Get the hash and last hash of the device.
 * @returns {Promise<[string, string]>} The hash and last hash.
 */
export function getHash(): Promise<[string, string]>;
/**
 * Evaluate an action taken by the device.
 * @param {string} client_id - The client ID.
 * @param {string} action - The type of evaluation.
 * @returns {Promise<EvaluationResponse>} The evaluation response.
 */
export function evaluate({ client_id, action, }: {
    client_id: string;
    action?: string;
}): Promise<EvaluationResponse>;
declare const Rupt: {
    attach: typeof attach;
    detach: typeof detach;
    getAttachedDevices: typeof getAttachedDevices;
    identify: typeof identify;
    getFingerprint: typeof getFingerprint;
    getHash: typeof getHash;
    evaluate: typeof evaluate;
};
export default Rupt;
